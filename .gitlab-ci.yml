# Note: expand yaml
# yaml merge-expand .gitlab-ci.yml _expandyml && cat _expandyml
# 
# GITLAB LINTER
# https://gitlab.kitware.com/utils/torch_liberator/-/ci/lint


# This CI file has 4 types of jobs:
# (1) in the build stage we we build the wheels on a manylinux docker image
# (2) then in the test stage we install the wheels, run unit tests, and measure coverage
# (3) after testing we sign the wheels with the CI's GPG key
# (4) finally if we are on the release branch we will push the signed wheels to pypi


# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
.__heredoc__: &__heredoc__
    - | 

        __doc__="""

        docs moved to dev/setup_secrets
        """ # "  # hack for vim yml syntax highlighter

stages:
  - build
  - test
  - gpgsign
  - deploy


### TEMPLATES ###
# Define common templates using YAML anchors


.cibuildwheel_template: &cibuildwheel_template
    stage: 
        build

    tags:
        # Tags define which runners will accept which jobs
        - linux
        - docker
        - privileged

    image: gitlab.kitware.com:4567/computer-vision/ci-docker/podman

    script:
        - podman --version
        - podman info --debug
        - python3 -m pip install git+https://github.com/Erotemic/cibuildwheel.git@dev/flow
        - pwd
        - ls -al
        - export CIBW_SKIP="pp* cp27-* cp35-*"
        - export CIBW_OCI_EXE="podman"
        # NOTE: this requires that some mechanism exists in cibuildwheel to
        # ignore this directory when it copys the repo into the container
        - mkdir -p ".cache/containers/vfs-storage/"
        - export CIBW_OCI_ROOT=$(realpath ".cache/containers/vfs-storage/")
        - echo "CIBW_OCI_ROOT = $CIBW_OCI_ROOT"
        - cibuildwheel --platform linux --print-build-identifiers
        # - cibuildwheel --output-dir wheelhouse --platform linux --archs x86_64,i686,aarch64,ppc64le,s390x,universal2,arm64,x86,AMD64
        - cibuildwheel --output-dir wheelhouse --platform linux
        - ls $CIBW_OCI_ROOT
        - ls wheelhouse

    artifacts:
        paths:
            - wheelhouse/

    # Contents of .cache/containers/vfs-storage are far too large to cache
    # Not sure if it is possible to cache the download of the images
    #cache:
    #    paths:
    #        - .cache/containers
    #    TODO: can we use skopeo to cache the images?

.common_template: &common_template
    tags:
        # Tags define which runners will accept which jobs
        - docker
        - linux
        - build

    variables:
        # Change pip's cache directory to be inside the project directory since we can
        # only cache local items.
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

    cache:
        paths:
            - .cache/pip


.common_test_template: &common_test_template
    <<: 
        - *common_template

    stage: 
        test
          
    # Coverage is a regex that will parse the coverage from the test stdout
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

    except:
        refs:
          - release 
          - main 
          - tags
        #changes:
        #    - README.rst
        #    - CHANGELOG.md


.build_template: &build_template
    # Tags define which runners will accept which jobs
    <<: 
        - *common_template

    stage: 
        build
    
    before_script:
        - python -V  # Print out python version for debugging

    script: 
        - python setup.py bdist_wheel 

    cache:
        paths:
            - .cache/pip

    artifacts:
        paths:
            - dist/*.whl


.common_test_template: &common_test_template
    <<: 
        - *common_template

    stage: 
        test
          
    # Coverage is a regex that will parse the coverage from the test stdout
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

    except:
        refs:
          - release 
          - main 
          - tags
        #changes:
        #    - README.rst
        #    - CHANGELOG.md


# Define anchors to be used in "before_script" parts
._setup_virtualenv_template: &_setup_virtualenv_template |-
    # Setup the correct version of python on this manylinux instance
    python --version  # Print out python version for debugging
    python -m pip install virtualenv
    python -m virtualenv venv
    source venv/bin/activate
    pip install pip -U
    pip install setuptools -U
    pip install pygments

._install_strict_minimal_requirements: &_install_strict_minimal_requirements |-
    ./dev/make_strict_req.sh
    pip install -r requirements-strict/runtime.txt -r requirements-strict/tests.txt

._install_strict_full_requirements: &_install_strict_full_requirements |-
    ./dev/make_strict_req.sh
    pip install -r requirements-strict/optional.txt -r requirements-strict/runtime.txt -r requirements-strict/tests.txt

    
._install_loose_minimal_requirements: &_install_loose_minimal_requirements |-
    pip install -r requirements/runtime.txt -r requirements/tests.txt


._install_loose_full_requirements: &_install_loose_full_requirements |-
    pip install -r requirements/optional.txt -r requirements/runtime.txt -r requirements/tests.txt


._run_tests_in_sandboxed_dir: &_run_tests_in_sandboxed_dir |-
    # Hack to test the installed wheel. TODO: make run_tests work better in this case.
    mkdir -p sandbox && cd sandbox && pytest --xdoctest-verbose=3 -s --cov-config ../.coveragerc --cov-report html --cov-report term --cov=torch_liberator --xdoc $(python -c "import ubelt; print(ubelt.modname_to_modpath('torch_liberator'))") ../tests


    
._test_full_script: &_test_full_script
    - ls wheelhouse || echo "wheelhouse does not exist"
    - MB_PYTHON_TAG=$(echo ${CI_JOB_NAME} | sed 's/.*\/\(.*\)-manylinux2010/\1/')
    - VERSION=$(python -c "import setup; print(setup.VERSION)")
    - BDIST_WHEEL_PATH=wheelhouse/torch_liberator-${VERSION}-${MB_PYTHON_TAG}-*manylinux*_x86_64.whl
    - pip install $BDIST_WHEEL_PATH
    # - xdoctest torch_liberator --style=google all --mask 
    - *_run_tests_in_sandboxed_dir


._test_minimal_script: &_test_minimal_script
    - ls wheelhouse || echo "wheelhouse does not exist"
    - MB_PYTHON_TAG=py3-none-any
    - VERSION=$(python -c "import setup; print(setup.VERSION)")
    - BDIST_WHEEL_PATH=dist/torch_liberator-${VERSION}-${MB_PYTHON_TAG}.whl
    - pip install $BDIST_WHEEL_PATH
    #- xdoctest -m torch_liberator --style=google all
    #- export DISABLE_C_EXTENSIONS=1
    #- pip install -r requirements/tests.txt
    - *_run_tests_in_sandboxed_dir
    
    
.test_full_loose_template: &test_full_loose_template
    <<: 
        - *common_test_template

    before_script:
        - *_setup_virtualenv_template
        - *_install_loose_full_requirements

    script: *_test_full_script


.test_minimal_loose_template: &test_minimal_loose_template
    <<: 
        - *common_test_template

    before_script:
        - *_setup_virtualenv_template
        - *_install_loose_minimal_requirements

    script: *_test_minimal_script

.test_full_strict_template: &test_full_strict_template
    <<: 
        - *common_test_template

    before_script:
        - *_setup_virtualenv_template
        - *_install_strict_full_requirements

    script: *_test_full_script


.test_minimal_strict_template: &test_minimal_strict_template
    <<: 
        - *common_test_template

    before_script:
        - *_setup_virtualenv_template
        - *_install_strict_minimal_requirements

    script: *_test_minimal_script


gpgsign/wheels:
    <<: 
        - *common_template

    image:
        python:3.8

    stage: 
        gpgsign

    script: 
        - ls wheelhouse
        - ls dist
        - export GPG_EXECUTABLE=gpg
        - export GPG_KEYID=$(cat dev/public_gpg_key)
        - echo "GPG_KEYID = $GPG_KEYID"
        - source dev/secrets_configuration.sh
        # note the variable pointed to by VARNAME_CI_SECRET is a protected variables only available on main and release branch
        - CI_SECRET=${!VARNAME_CI_SECRET}
        - $GPG_EXECUTABLE --version
        - openssl version
        - $GPG_EXECUTABLE --list-keys
        # note CI_KITWARE_SECRET is a protected variables only available on master and release branch
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_subkeys.pgp.enc | $GPG_EXECUTABLE --import 
        - GPG_SIGN_CMD="$GPG_EXECUTABLE --batch --yes --detach-sign --armor --local-user $GPG_KEYID"

        - |
            WHEEL_PATHS=(wheelhouse/*.whl)
            WHEEL_PATHS_STR=$(printf '"%s" ' "${WHEEL_PATHS[@]}")
            echo "$WHEEL_PATHS_STR"
            for WHEEL_PATH in "${WHEEL_PATHS[@]}"
            do
                echo "------"
                echo "WHEEL_PATH = $WHEEL_PATH"
                $GPG_SIGN_CMD --output $WHEEL_PATH.asc $WHEEL_PATH
                $GPG_EXECUTABLE --verify $WHEEL_PATH.asc $WHEEL_PATH  || echo "hack, the first run of gpg very fails"
                $GPG_EXECUTABLE --verify $WHEEL_PATH.asc $WHEEL_PATH 
            done
        - ls wheelhouse
        - ls dist

    artifacts:
        paths:
            - wheelhouse/*.asc

    only:
        refs:
            # Gitlab will only expose protected variables on protected branches
            # (which I've set to be master and release), so only run this stage
            # there.
            - master
            - main
            - release


deploy/wheels:
    <<: 
        - *common_template

    image:
        python:3.8

    stage: 
        deploy

    script: 
        - pip install six pyopenssl ndg-httpsclient pyasn1 requests[security] twine -U 
        - ls wheelhouse
        - ls dist
        - |
            WHEEL_PATHS=(wheelhouse/*.whl)
            WHEEL_PATHS_STR=$(printf '"%s" ' "${WHEEL_PATHS[@]}")
            echo "$WHEEL_PATHS_STR"
            for WHEEL_PATH in "${WHEEL_PATHS[@]}"
            do
                twine check $WHEEL_PATH.asc $WHEEL_PATH
                twine upload --username $TWINE_USERNAME --password $TWINE_PASSWORD $WHEEL_PATH.asc $WHEEL_PATH
            done
            
    only:
        refs:
            - release


# Aliases for the images that run the tests
.image_python39: &image_python39
    gitlab.kitware.com:4567/computer-vision/ci-docker/gl-python:3.9
.image_python38: &image_python38
    gitlab.kitware.com:4567/computer-vision/ci-docker/gl-python:3.8
.image_python37: &image_python37
    gitlab.kitware.com:4567/computer-vision/ci-docker/gl-python:3.7
.image_python36: &image_python36
    gitlab.kitware.com:4567/computer-vision/ci-docker/gl-python:3.6


### JOBS ###
# Define the actual jobs

# ---------------
# Python 3.9 Jobs

build/cp39-cp39-manylinux2010:
    <<: 
        - *cibuildwheel_template
    variables:
        CIBW_BUILD: "cp39-*"

test_full_loose/cp39-cp39-manylinux2010:
    <<: 
        - *test_full_loose_template
    image:
        *image_python39
    needs: 
        -  build/cp39-cp39-manylinux2010

test_minimal_loose/cp39-cp39-manylinux2010:
    <<: 
        - *test_minimal_loose_template
    image:
        *image_python39
    needs: 
        -  build/py3-none-any

test_minimal_strict/cp39-cp39-manylinux2010:
    <<: 
        - *test_minimal_strict_template
    image:
        *image_python39
    needs: 
        -  build/py3-none-any

test_full_strict/cp39-cp39-manylinux2010:
    <<: 
        - *test_full_strict_template
    image:
        *image_python39
    needs: 
        -  build/cp39-cp39-manylinux2010

# ---------------
# Python 3.8 Jobs

build/cp38-cp38-manylinux2010:
    <<: 
        - *cibuildwheel_template
    variables:
        CIBW_BUILD: "cp38-*"

test_full_loose/cp38-cp38-manylinux2010:
    <<: 
        - *test_full_loose_template
    image:
        *image_python38
    needs: 
        -  build/cp38-cp38-manylinux2010

test_minimal_loose/cp38-cp38-manylinux2010:
    <<: 
        - *test_minimal_loose_template
    image:
        *image_python38
    needs: 
        -  build/py3-none-any

test_minimal_strict/cp38-cp38-manylinux2010:
    <<: 
        - *test_minimal_strict_template
    image:
        *image_python38
    needs: 
        -  build/py3-none-any

test_full_strict/cp38-cp38-manylinux2010:
    <<: 
        - *test_full_strict_template
    image:
        *image_python38
    needs: 
        -  build/cp38-cp38-manylinux2010

# ---------------
# Python 3.7 Jobs

build/cp37-cp37m-manylinux2010:
    <<: 
        - *cibuildwheel_template
    variables:
        CIBW_BUILD: "cp37-*"

test_full_loose/cp37-cp37m-manylinux2010:
    <<: 
        - *test_full_loose_template
    image:
        *image_python37
    needs: 
        -  build/cp37-cp37m-manylinux2010

test_minimal_loose/cp37-cp37m-manylinux2010:
    <<: 
        - *test_minimal_loose_template
    image:
        *image_python37
    needs: 
        -  build/py3-none-any

test_minimal_strict/cp37-cp37m-manylinux2010:
    <<: 
        - *test_minimal_strict_template
    image:
        *image_python37
    needs: 
        -  build/py3-none-any

test_full_strict/cp37-cp37m-manylinux2010:
    <<: 
        - *test_full_strict_template
    image:
        *image_python37
    needs: 
        -  build/cp37-cp37m-manylinux2010


# ---------------
# Python 3.6 Jobs

build/cp36-cp36m-manylinux2010:
    <<: 
        - *cibuildwheel_template
    variables:
        CIBW_BUILD: "cp36-*"

test_full_loose/cp36-cp36m-manylinux2010:
    <<: 
        - *test_full_loose_template
    image:
        *image_python36
    needs: 
        -  build/cp36-cp36m-manylinux2010

test_minimal_loose/cp36-cp36m-manylinux2010:
    <<: 
        - *test_minimal_loose_template
    image:
        *image_python36
    needs: 
        -  build/py3-none-any

test_minimal_strict/cp36-cp36m-manylinux2010:
    <<: 
        - *test_minimal_strict_template
    image:
        *image_python36
    needs: 
        -  build/py3-none-any

test_full_strict/cp36-cp36m-manylinux2010:
    <<: 
        - *test_full_strict_template
    image:
        *image_python36
    needs: 
        -  build/cp36-cp36m-manylinux2010


# ---------------
# Universal Python Jobs
build/py3-none-any:
    <<: 
        - *common_template

    stage: 
        build

    image: gitlab.kitware.com:4567/computer-vision/ci-docker/gl-python:3.7

    before_script:
        - python -V  # Print out python version for debugging
        - pip install virtualenv
        - virtualenv venv
        - source venv/bin/activate
        - pip install pip -U
        - pip install pip setuptools -U

    script: 
        - export DISABLE_C_EXTENSIONS=1
        - DISABLE_C_EXTENSIONS=1 python setup.py bdist_wheel
        - DISABLE_C_EXTENSIONS=1 python setup.py sdist
        - ls dist
          
    artifacts:
        paths:
            - dist/*.whl
    cache:
        paths:
            - .cache/pip


gpgsign/py3-none-any:
    <<: 
        - *common_template

    stage: 
        gpgsign

    script: 
        - ls dist
        - MB_PYTHON_TAG=py3-none-any
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        - BDIST_WHEEL_PATH=dist/torch_liberator-${VERSION}-${MB_PYTHON_TAG}.whl
        - export GPG_EXECUTABLE=gpg
        - export GPG_KEYID=$(cat dev/public_gpg_key)
        - echo "GPG_KEYID = $GPG_KEYID"
        - source dev/secrets_configuration.sh
        # note the variable pointed to by VARNAME_CI_SECRET is a protected variables only available on main and release branch
        - CI_SECRET=${!VARNAME_CI_SECRET}
        - $GPG_EXECUTABLE --version
        - openssl version
        - $GPG_EXECUTABLE --list-keys
        # note CI_KITWARE_SECRET is a protected variables only available on master and release branch
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_public_gpg_key.pgp.enc | $GPG_EXECUTABLE --import 
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/gpg_owner_trust.enc | $GPG_EXECUTABLE --import-ownertrust
        - GLKWS=$CI_SECRET openssl enc -aes-256-cbc -pbkdf2 -md SHA512 -pass env:GLKWS -d -a -in dev/ci_secret_gpg_subkeys.pgp.enc | $GPG_EXECUTABLE --import 
        - GPG_SIGN_CMD="$GPG_EXECUTABLE --batch --yes --detach-sign --armor --local-user $GPG_KEYID"
        #- # $GPG_EXECUTABLE --list-keys
        - echo "Signing wheels"
        - $GPG_SIGN_CMD --output $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
        - ls dist
        - echo "Verifying wheels"
        - $GPG_EXECUTABLE --verify $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH  || echo "hack, the first run of gpg very fails"
        - $GPG_EXECUTABLE --verify $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH 
        - echo "Verified wheels"

    artifacts:
        paths:
            - dist/*.asc

    only:
        refs:
            # Gitlab will only expose protected variables on protected branches
            # (which I've set to be master and release), so only run this stage
            # there.
            - master
            - main
            - release
    image:
        python:3.7

deploy/py3-none-any:
    <<: 
        - *common_template

    image:
        python:3.7

    stage: 
        deploy

    script: 
        - ls dist
        - MB_PYTHON_TAG=py3-none-any
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        - BDIST_WHEEL_PATH=dist/torch_liberator-${VERSION}-${MB_PYTHON_TAG}.whl
        - pip install six pyopenssl ndg-httpsclient pyasn1 -U 
        - pip install requests[security] twine 
        - echo "Checking wheels"
        - ls -al ${BDIST_WHEEL_PATH}*
        - twine check $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
        - echo "Uploading wheels"
        # todo, can we tag the branch here as well?
        # note TWINE_USERNAME and TWINE_PASSWORD are protected variables only available on master and release branch
        - twine upload --username $TWINE_USERNAME --password $TWINE_PASSWORD $BDIST_WHEEL_PATH.asc $BDIST_WHEEL_PATH
        # Have the server git-tag the release and push the tags
        - VERSION=$(python -c "import setup; print(setup.VERSION)")
        # do sed twice to handle the case of https clone with and without a read token
        - URL_HOST=$(git remote get-url origin | sed -e 's|https\?://.*@||g' | sed -e 's|https\?://||g')
        - echo "URL_HOST = $URL_HOST"
        - git config user.email "ci@gitlab.kitware.com"
        - git config user.name "Gitlab-CI"
        - git tag $VERSION -m "tarball tag $VERSION"
        - git push --tags "https://${GIT_PUSH_TOKEN}@${URL_HOST}"
            
    only:
        refs:
            - release
